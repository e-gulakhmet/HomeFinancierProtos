"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
import homefinancier.users.v1.users_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class UsersServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateUser: grpc.UnaryUnaryMultiCallable[
        homefinancier.users.v1.users_pb2.CreateUserRequest,
        homefinancier.users.v1.users_pb2.CreateUserResponse,
    ]

class UsersServiceAsyncStub:
    CreateUser: grpc.aio.UnaryUnaryMultiCallable[
        homefinancier.users.v1.users_pb2.CreateUserRequest,
        homefinancier.users.v1.users_pb2.CreateUserResponse,
    ]

class UsersServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def CreateUser(
        self,
        request: homefinancier.users.v1.users_pb2.CreateUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[homefinancier.users.v1.users_pb2.CreateUserResponse, collections.abc.Awaitable[homefinancier.users.v1.users_pb2.CreateUserResponse]]: ...

def add_UsersServiceServicer_to_server(servicer: UsersServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
